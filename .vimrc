" DO NOT EDIT THIS FILE
" Add your own customizations in ~/.vim_runtime/my_configs.vim
syntax enable
filetype plugin indent on
filetype indent on
set nocompatible
set number

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

"Display all matching files when we tab complete  
set wildmenu

set cc=80
set mouse=a 
set nohlsearch
set termguicolors
set ttyfast
set autoindent
set smartindent 
set tabstop=2
set shiftwidth=2
set hidden
set incsearch
set scrolloff=8
set signcolumn=yes
"open new split panes to right and below
set splitright
set splitbelow
set cursorline 
set showcmd

"for autocomplete
set complete+=kspell
set completeopt=menuone,longest
set shortmess+=c

"learned from: https://learnvimscriptthehardway.stevelosh.com/chapters/17.html
set statusline=%f                      " Patn to the file 
set statusline+=\ -\                   " Seoarator
set statusline+=FileType:              " Label
set statusline+=%y                     " FileType of the file
set statusline=[%4l]
set statusline+=%L  "Total lines

"set delete/backspace to delete in normal mode
nnoremap <BS> X

call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')
"Declare the list of plugins.
"
"Autocomplete populates automatcially
 Plug 'vim-scripts/AutoComplPop'

"auto pairs completion
Plug 'tmsvg/pear-tree'
"Vim snippets
 Plug 'SirVer/ultisnips' 
 Plug 'honza/vim-snippets'
 "for the status line 
 Plug 'tpope/vim-sensible'
 Plug 'itchyny/lightline.vim'
 Plug 'bling/vim-bufferline'
 Plug 'dracula/vim'
 "Plug 'ryanoasis/vim-devicons'
 "linter ale
 Plug 'dense-analysis/ale'
 Plug 'morhetz/gruvbox'
 Plug 'preservim/nerdtree'
 Plug 'preservim/nerdcommenter'
 Plug 'voldikss/vim-floaterm'
 Plug 'eslint/eslint'
 Plug 'sheerun/vim-polyglot'
 Plug 'prettier/vim-prettier', {
 \ 'do': 'yarn install --frozen-lockfile --production',
 \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }
call plug#end()

"uncomment the following line for guicolors
if (has("termguicolors"))
  set termguicolors
endif

"syntax enable
colorscheme dracula 

try
  source ~/.vim_runtime/my_configs.vim
catch
endtry

nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>

let mapleader = ","
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"for terminal with f12
nnoremap <F12> :terminal<CR>
nnoremap <C-h> :noh<CR>
nnoremap <C-c> :Bclose<CR>

"turn terminal to normal mode with escape
tnoremap <Esc> <C-\><C-n>

"for autocomplete
"navigate the complete menu items like CTRL+n /CRTL+p would
inoremap <expr> <Down> pumvisible() ? "<C-n>" : "<Down>"
inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

"select the complete menu item like CTRL+y would
inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
inoremap <expr> <CR> pumvisible() ? "<C-y>" : "<CR>"

"cancel the complete menu item like CTRL+e would
inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

"let g:floaterm_keymap_toggle = '<F12>'

let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
