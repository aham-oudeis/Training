#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'rb185')
    setup_schema unless expense_table_exist?
  end

  def display_all_data
    result = @connection.exec "SELECT * FROM expenses"
    display_data(result)
  end
  
  def add_expense(argv)
    amount = argv[1]
    memo = argv[2]
    sql = "INSERT INTO expenses (amount, memo)
                              VALUES ($1, $2);"
    parameters = [amount, memo]
    @connection.exec_params(sql, parameters)
  end

  def search_expense(argv)
    item = argv[1]

    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"

    result = @connection.exec_params(sql, ["%#{item}%"])

    display_data(result)
  end

  def delete_expense(argv)
    id = argv[1]
    data_sql = "SELECT * FROM expenses WHERE id = $1::integer;"
    result = @connection.exec_params(data_sql, [id])
  
    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1::integer;"
      @connection.exec_params(sql, [id])
      puts "The following record has been deleted."
      display_data(result)
    else
      puts "There is no expense with id '#{id}'"
    end
  end

  def clear_all_expenses
    sql = "DELETE FROM expenses;"
    @connection.exec_params(sql, [])
    puts "All expense have been deleted."
  end

  private

  def display_data(result)
    rows = result.ntuples
    rows = "no" if rows.zero?

    if rows != 1
      puts "There are #{rows} expenses"
    else
      puts "There is 1 expense"
    end
  
    display_each_row(result) if rows != 'no'
  end

  def display_each_row(result)
    result.each do |record|
      record_value = [record['id'].rjust(2),
                      record['created_on'].center(15),
                      record['amount'].rjust(10),
                      record['memo'].ljust(15)
                      ]
      puts record_value.join(' | ')
    end

    puts '_' * 40
    
    total = result.field_values('amount').reduce(0) { |sum, num| sum + num.to_f }
    puts ['Total'.ljust(23), total.to_s.rjust(10)].join
  end

  def expense_table_exist?
    sql = "SELECT COUNT(*) FROM information_schema.tables 
           WHERE table_schema = 'public' AND table_name = 'expenses';"
    
    @connection.exec_params(sql)[0]['count'] == "1"
  end

  def setup_schema
    sql = "CREATE TABLE expenses (
            id serial PRIMARY KEY,
            memo text NOT NULL,
            amount numeric NOT NULL CHECK(amount > 0),
            created_on date NOT NULL DEFAULT NOW()
          );"

    @connection.exec_params(sql)
  end
end

class CLI
  def initialize(argv)
    @expense = ExpenseData.new
    @argv = argv
  end

  def num?(str)
    str.to_i.to_s == str || str.to_f.to_s == str
  end

  def invalid_command?
    valid_commands = 
      ['add', 'clear', 'list', 'delete', 'search']
    !valid_commands.include?(@argv.first)
  end

  def error_add_syntax
    num_of_args = @argv.size
  
    if [2, 3].include?(num_of_args)
      if num?(@argv[1])
        nil
      else
        "Amount field must be a number"
      end
    elsif num_of_args <= 3 
      "Amount and memo are required"
    else
      "The add syntax does not look right."
    end 
  end

  def error_clear_syntax
    if @argv.size == 1
      nil
    else
      "Clear command takes no argument"
    end
  end

  def error_list_syntax
    if @argv.size == 1
      nil
    else
      "List command takes no argument"
    end
  end

  def error_delete_syntax
    if valid_delete_syntax?
      nil
    else
      "Delete command takes only one id argument"
    end
  end

  def valid_delete_syntax?
    @argv.size == 2 && num?(@argv[1])
  end

  def error_search_syntax
    if @argv.size == 2
      nil
    else
      "Search command takes only one argument"
    end
  end

  def error_msg
    if invalid_command?
      "Please enter a valid command!"
    end

    command = @argv.first
  
    send("error_#{command}_syntax".to_sym)
  end

  def display_help
    puts <<~INFO
    An expense recording system
    
    Commands:
    
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list = list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    
    INFO
  end

  def verify_delete?
    puts "This will remove all your expenses. Are you sure? (y/n)"
    input = $stdin.getch

    input == 'y'
  end 

  def run
    command = @argv.first

    return display_help if command.nil?
  
    error = error_msg
    return (puts error) if error 
  
    case command
    when 'list'
      @expense.display_all_data
    when 'add'
      @expense.add_expense(@argv)
    when 'search'
      @expense.search_expense(@argv)
    when 'delete'
      @expense.delete_expense(@argv)
    when 'clear'
      @expense.clear_all_expenses if verify_delete?
    end
  end
end

CLI.new(ARGV).run